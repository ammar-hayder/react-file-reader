{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleChange","event","setState","csvfile","target","files","setDelimiter","e","delimiter","value","setRowcount","rowCount","importCSV","state","Papa","parse","complete","updateData","header","preview","undefined","tableData","columns","bind","result","data","Object","keys","map","name","selector","this","className","data-test-handle","htmlFor","type","ref","input","filesInput","placeholder","id","onChange","onClick","title","pagination","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUAuGeA,G,wDAjGb,aAAe,IAAD,8BACZ,gBAWFC,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZC,QAASF,EAAMG,OAAOC,MAAM,MAdlB,EAkBdC,aAAe,SAAAC,GAAC,OAAG,EAAKL,SAAS,CAACM,UAAWD,EAAEH,OAAOK,SAlBxC,EAmBdC,YAAc,SAAAH,GAAC,OAAI,EAAKL,SAAS,CAACS,SAASJ,EAAEH,OAAOK,SAnBtC,EAqBdG,UAAY,WAAO,IACTT,EAAY,EAAKU,MAAjBV,QACRW,IAAKC,MAAMZ,EAAS,CAClBa,SAAU,EAAKC,WACfC,QAAQ,EACRC,QAAS,EAAKN,MAAMF,SACpBH,UAAW,EAAKK,MAAML,aAzBxB,EAAKK,MAAQ,CACXV,aAASiB,EACTC,eAAUD,EACVZ,UAAU,IACVG,SAAU,IACVW,QAAS,IAEX,EAAKL,WAAa,EAAKA,WAAWM,KAAhB,gBATN,E,uDA+BHC,GACT,IAAIC,EAAOD,EAAOC,KAEdH,EADcI,OAAOC,KAAKH,EAAOC,KAAK,IACjBG,KAAI,SAACrB,GAC5B,MAAO,CAAEsB,KAAMtB,EAAGuB,SAAUvB,MAE9BwB,KAAK7B,SAAS,CAACoB,QAASA,EAAQD,UAAYI,M,+BAGpC,IAAD,OACP,OACE,yBAAKO,UAAU,iBACb,wBAAIC,mBAAiB,gBAArB,oBACA,yBAAKD,UAAU,eACb,yBAAKA,UAAU,cACb,2BAAOE,QAAQ,QAAf,eACA,2BACEF,UAAU,eACVG,KAAK,OACLC,IAAK,SAACC,GACJ,EAAKC,WAAaD,GAEpBR,KAAK,OACLU,YAAa,KACbC,GAAG,OACHC,SAAUV,KAAK/B,gBAGnB,yBAAKgC,UAAU,2BACb,2BAAOE,QAAQ,aAAf,aACA,2BACEF,UAAU,eACVH,KAAK,YACLY,SAAUV,KAAKzB,aACfkC,GAAG,eAIP,yBAAKR,UAAU,2BACb,2BAAOE,QAAQ,QAAf,QACA,2BACEF,UAAU,eACVH,KAAK,YACLM,KAAK,SACLM,SAAUV,KAAKrB,YACf8B,GAAG,UAGP,4BAAQE,QAASX,KAAKnB,UAAWoB,UAAU,wBAA3C,gBAKDD,KAAKlB,MAAMQ,WACV,kBAAC,IAAD,CACEsB,MAAM,cACNrB,QAASS,KAAKlB,MAAMS,QACpBG,KAAMM,KAAKlB,MAAMQ,UACjBuB,YAAY,S,GA1FNC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a9fe4974.chunk.js","sourcesContent":["import React from 'react';\nimport Papa from 'papaparse' ;\nimport DataTable from \"react-data-table-component\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      csvfile: undefined,\n      tableData:undefined,\n      delimiter:',',\n      rowCount: '2',\n      columns: [],\n    };\n    this.updateData = this.updateData.bind(this);\n  }\n\n  handleChange = event => {\n    this.setState({\n      csvfile: event.target.files[0]\n    });\n  };\n\n  setDelimiter = e =>this.setState({delimiter: e.target.value})\n  setRowcount = e => this.setState({rowCount:e.target.value});\n\n  importCSV = () => {\n    const { csvfile } = this.state;\n    Papa.parse(csvfile, {\n      complete: this.updateData,\n      header: true,\n      preview: this.state.rowCount,\n      delimiter: this.state.delimiter\n    });\n  };\n\n  updateData(result) {\n    var data = result.data;\n    let columnName =  Object.keys(result.data[0]);\n    let columns = columnName.map((e)=>{\n      return { name: e, selector: e}\n    });\n    this.setState({columns: columns,tableData : data});\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <h2 data-test-handle=\"page-heading\">Import CSV File!</h2>\n        <div className=\"form-inline\">\n          <div className=\"form-group\">\n            <label htmlFor=\"file\">Upload file</label>\n            <input\n              className=\"form-control\"\n              type=\"file\"\n              ref={(input) => {\n                this.filesInput = input;\n              }}\n              name=\"file\"\n              placeholder={null}\n              id=\"file\"\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-group mx-sm-3 mb-2\">\n            <label htmlFor=\"delimiter\">Delimiter</label>\n            <input\n              className=\"form-control\"\n              name=\"delimiter\"\n              onChange={this.setDelimiter}\n              id=\"delimiter\"\n            />\n          </div>\n\n          <div className=\"form-group mx-sm-3 mb-2\">\n            <label htmlFor=\"rows\">Rows</label>\n            <input\n              className=\"form-control\"\n              name=\"row-count\"\n              type=\"number\"\n              onChange={this.setRowcount}\n              id=\"rows\"\n            />\n          </div>\n          <button onClick={this.importCSV} className=\"btn btn-primary mb-2\">\n            Render file\n          </button>\n          \n        </div>\n        {this.state.tableData && (\n          <DataTable\n            title=\"Parsed Data\"\n            columns={this.state.columns}\n            data={this.state.tableData}\n            pagination={true}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}